#ifndef CPSC131_MYQUEUE_HPP
#define CPSC131_MYQUEUE_HPP


#include <list>
#include <stdexcept>



namespace CPSC131
{
	
	template <class T>
	class MyQueue
	{
		
		public:
			
			
			MyQueue() {}
			
		
			void enqueue(const T& item)
			{
				list.push_back(item);
				size_++;
			}
			
		
			void dequeue()
			{
				if (empty())
				{
					throw std::range_error("The queue is empty");
				}
				list.pop_front();
				size_--;
			}
			
		
			const T& front()
			{
				if (empty())
				{
					throw std::range_error("The queue is empty");
				}
				return list.front();
			}
			
		
			void clear()
			{
				list.clear();
				size_ = 0;
			}
			
		
			size_t size() const
			{
				return size_;
			}
			
			bool empty() const
			{
				return size_ == 0;
			}
		
		
		private:
			
			std::list<T> list;
			size_t size_ = 0;
			
	};
}
